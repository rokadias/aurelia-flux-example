{"version":3,"sources":["plan-store.js"],"names":[],"mappings":";;;4EAKM,MAAa,EAMN,SAAS;;;;;;;;;;4BAXd,MAAM;gCAAE,UAAU;;uCAClB,YAAY;qCAAE,UAAU;;iDACxB,mBAAmB;;;;;AAGrB,YAAa,GAAG,UAAU,CAAC,SAAS,CAAC,YAAY,CAAC;;AAM3C,eAAS;qBAAT,SAAS;;iBAWJ,CAAC,UAAU,CAAC;;;;AAEjB,iBAbA,SAAS,CAaR,UAAqB,EAAE;gCAbxB,SAAS;;eAEpB,MAAM,GAAG,EAAE;eAOX,YAAY,GAAG,IAAI;;AAKjB,cAAI,CAAC,UAAU,GAAG,UAAU,CAAC;SAC9B;;8BAfU,SAAS;;uBA2BnB,MAAM,CAAC,mBAAmB,CAAC,WAAW,CAAC;iBACxB,0BAAC,OAAO,EAAE,OAAO,EAAE;AACjC,gBAAI,CAAC,YAAY,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,UAAA,CAAC;qBAAI,CAAC,CAAC,OAAO,IAAI,OAAO;aAAA,CAAC,CAAC;AAClE,kBAAM,CAAC,KAAK,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;AAC1C,gBAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,mBAAmB,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;AAC9E,kBAAM,CAAC,KAAK,CAAC,cAAc,EAAE,mBAAmB,CAAC,aAAa,CAAC,CAAC;WACjE;;;uBAGA,MAAM,CAAC,mBAAmB,CAAC,cAAc,CAAC;iBACrB,gCAAC,OAAO,EAAE,QAAQ,EAAE;AACxC,kBAAM,CAAC,KAAK,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;AAC1C,gBAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;AACvB,gBAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,mBAAmB,CAAC,eAAe,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AAC3E,kBAAM,CAAC,KAAK,CAAC,cAAc,EAAE,mBAAmB,CAAC,eAAe,CAAC,CAAC;WACnE;;;uBAzBA,YAAY,CAAC,WAAW,CAAC;eACjB,eAAG;AACV,mBAAO,IAAI,CAAC,MAAM,CAAC;WACpB;;;uBAEA,YAAY,CAAC,cAAc,CAAC;eACd,eAAG;AAChB,mBAAO,IAAI,CAAC,YAAY,CAAC;WAC1B;;;eAzBU,SAAS;;;2BAAT,SAAS","file":"plan-store.js","sourcesContent":["import {handle, Dispatcher} from 'aurelia-flux';\nimport {computedFrom, LogManager} from 'aurelia-framework';\nimport {PlanActionConstants} from './plan-action-constants';\nimport _ from 'lodash';\n\nconst logger:Logger = LogManager.getLogger('plan-store');\n\n/**\n * A store which contains all the accessors necessary to read Projects. As with all stores,\n * this store is read only.\n */\nexport class PlanStore {\n\n  _plans = [];\n\n  /**\n   * Keeps track of the currently viewed plan.\n   * @type {null}\n   * @private\n   */\n  _currentPlan = null;\n\n  static inject = [Dispatcher];\n\n  constructor(dispatcher:Dispatcher) {\n    this.dispatcher = dispatcher;\n  }\n\n  @computedFrom('_projects')\n  get plans() {\n    return this._plans;\n  }\n\n  @computedFrom('_currentPlan')\n  get currentPlan() {\n    return this._currentPlan;\n  }\n\n  @handle(PlanActionConstants.SELECT_PLAN)\n  handleSelectPlan(message, visitId) {\n    this._currentPlan = _.find(this.plans, p => p.visitId == visitId);\n    logger.debug('Received event: ', message);\n    this.dispatcher.dispatch(PlanActionConstants.PLAN_SELECTED, this.currentPlan);\n    logger.debug('Sent event: ', PlanActionConstants.PLAN_SELECTED);\n  }\n\n\n  @handle(PlanActionConstants.RETRIEVE_PLANS)\n  handleRetrieveProjects(message, projects) {\n    logger.debug('Received event: ', message);\n    this._plans = projects;\n    this.dispatcher.dispatch(PlanActionConstants.PLANS_RETRIEVED, this._plans);\n    logger.debug('Sent event: ', PlanActionConstants.PLANS_RETRIEVED);\n  }\n\n}"],"sourceRoot":"/source/"}