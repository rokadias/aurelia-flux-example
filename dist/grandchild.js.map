{"version":3,"sources":["grandchild.js"],"names":[],"mappings":";;;6GAMM,MAAa,EAEN,UAAU;;;;;;;;;;iDARf,mBAAmB;;+CACnB,kBAAkB;;6BAClB,SAAS;;mCACT,QAAQ;qCAAE,UAAU;;4BACpB,MAAM;6BAAE,OAAO;gCAAE,UAAU;;;AAE7B,YAAa,GAAG,UAAU,CAAC,SAAS,CAAC,mBAAmB,CAAC;;AAElD,gBAAU;;;;8BAAV,UAAU;;uBAIpB,QAAQ;;;;;iBAFO,CAAC,kBAAkB,EAAE,SAAS,EAAE,UAAU,CAAC;;;;AAIhD,iBANA,UAAU,CAMT,kBAAsC,EAAE,SAAoB,EAAE,UAAsB,EAAE;gCANvF,UAAU;;;;AAOnB,cAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;AAC7C,cAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC3B,cAAI,CAAC,UAAU,GAAG,UAAU,CAAC;SAC9B;;8BAVU,UAAU;;iBAgBb,kBAAC,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE;AACnC,kBAAM,CAAC,KAAK,CAAC,sBAAsB,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;AACrD,mBAAO,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;WAC3D;;;iBAES,sBAAG;AACX,kBAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;WAC5B;;;uBAMA,MAAM,CAAC,mBAAmB,CAAC,aAAa,CAAC;iBACxB,4BAAC,OAAO,EAAE,IAAI,EAAE;AAChC,kBAAM,CAAC,KAAK,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;AAC1C,kBAAM,CAAC,KAAK,CAAC,kDAAkD,EAAE,IAAI,CAAC,CAAC;AACvE,gBAAI,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;WACxC;;;eAlCU,UAAU;;;4BAAV,UAAU","file":"grandchild.js","sourcesContent":["import {PlanActionConstants} from './plan-action-constants';\nimport {PlanActionCreators} from './plan-action-creators';\nimport {PlanStore} from './plan-store';\nimport {bindable, LogManager} from 'aurelia-framework';\nimport {handle, waitFor, Dispatcher} from 'aurelia-flux';\n\nconst logger:Logger = LogManager.getLogger(\"plan-view-example\");\n\nexport class Grandchild {\n\n  static inject = [PlanActionCreators, PlanStore, Dispatcher];\n\n  @bindable plan;\n\n  constructor(planActionCreators: PlanActionCreators, planStore: PlanStore, dispatcher: Dispatcher) {\n    this.planActionCreators = planActionCreators;\n    this.planStore = planStore;\n    this.dispatcher = dispatcher;\n  }\n\n  ////////////////////////////////////////\n  //UI Actions\n  ////////////////////////////////////////\n\n  activate(params, config, navigation) {\n    logger.debug(\"activate for visitId\", params.visitId);\n    return this.planActionCreators.selectPlan(params.visitId);\n  }\n\n  deactivate() {\n    logger.debug(\"deactivate\");\n  }\n\n  ////////////////////////////////////////\n  // Async messages from store.\n  ////////////////////////////////////////\n\n  @handle(PlanActionConstants.PLAN_SELECTED)\n  handlePlanSelected(message, plan) {\n    logger.debug('Received event: ', message);\n    logger.debug(\"This will only get invoked this one time == bug.\", plan);\n    this.plan = this.planStore.currentPlan;\n  }\n}"],"sourceRoot":"/source/"}